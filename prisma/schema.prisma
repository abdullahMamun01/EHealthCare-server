// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String   @id @default(uuid())
  role               UserRole @default(PATIENT)
  email              String   @unique
  password           String
  needPasswordChange Boolean  @default(true)
  isDeleted          Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now())

  patient Patient?
  Doctor  Doctor?
  Admin   Admin?

  @@map("users")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  DOCTOR
  PATIENT
}

model Patient {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  photo     String?
  contactNo String?
  isDeleted Boolean  @default(false)
  address   String?
  user      User     @relation(references: [email], fields: [email])
  gender    Gender?
  country   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  patientHealthData PatientHealthData?
  appointment       Appointment[]
  medicleReports    MedicleReports[]
  prescription      Prescription[]
  reviews           Reviews[]

  @@map("patients")
}

enum BloodGroup {
  A_POS
  A_NEG
  B_POS
  B_NEG
  AB_POS
  AB_NEG
  O_POS
  O_NEG
}

model Doctor {
  id                String        @id @default(uuid())
  name              String
  email             String        @unique
  photo             String?
  gender            Gender?
  yearsOfExperience Int           @default(0)
  contactNo         String
  address           String
  country           String
  licenseNo         String
  consultationFee   Int           @default(0)
  isDeleted         Boolean       @default(false)
  avgRating         Float         @default(0.0)
  status            AccountStatus @default(ACTIVE)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @default(now())

  user              User                @relation(references: [email], fields: [email])
  appointment       Appointment[]
  doctorSchedules   DoctorSchedules[]
  prescription      Prescription[]
  doctorSpecielites DoctorSpecielites[]
  reviews           Reviews[]

  @@map("doctors")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model Admin {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  photo     String?
  contactNo String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(references: [email], fields: [email])

  @@map("admins")
}

enum AccountStatus {
  ACTIVE
  INACTIVE
}

model PatientHealthData {
  id               String         @id @default(uuid())
  patientId        String         @unique
  bloodGroup       BloodGroup?
  hasDibatics      Boolean
  hasAlergies      Boolean
  bloodPressure    String
  hasPastSurgeries String
  height           Float          @default(0)
  weight           Float          @default(0)
  maritalStatus    MetarialStatus
  medications      String[]
  updatedAt        DateTime       @default(now())
  createdAt        DateTime       @default(now())
  patient          Patient        @relation(fields: [patientId], references: [id])

  @@map("patient_health_datas")
}

enum MetarialStatus {
  SINGLE
  MARRIED
  DIVORCED
}

model Appointment {
  id             String            @id @default(uuid())
  patientId      String
  doctorId       String
  scheduleId     String
  videoCallingId String
  status         AppointmentStatus
  paymentStatus  PaymentStatus
  updatedAt      DateTime          @default(now())
  createdAt      DateTime          @default(now())

  doctor  Doctor  @relation(fields: [doctorId], references: [id])
  patient Patient @relation(fields: [patientId], references: [id])

  schedule        Schedule         @relation(fields: [scheduleId], references: [id])
  doctorSchedules DoctorSchedules?
  prescription    Prescription?
  reviews         Reviews?
  payments        Payments?

  @@map("appointments")
}

enum PaymentStatus {
  PENDING
  COMPLETED
  CANCELED
  REFUNDED
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELED
  COMPLETED
}

model Schedule {
  id              String            @id @default(uuid())
  startDate       DateTime
  endDate         DateTime
  startTime       DateTime
  endTime         DateTime
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  appointment     Appointment[]
  doctorSchedules DoctorSchedules[]

  @@map("schedules")
}

model DoctorSchedules {
  doctorId      String
  scheduleId    String
  appointmentId String      @unique
  isBooked      Boolean
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  doctor        Doctor      @relation(fields: [doctorId], references: [id])
  schedule      Schedule    @relation(fields: [scheduleId], references: [id])
  appointment   Appointment @relation(fields: [appointmentId], references: [id])

  @@id([doctorId, scheduleId])
  @@map("doctor_schedules")
}

model MedicleReports {
  id         String   @id @default(uuid())
  patientId  String
  reportName String
  reportLink String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  patient Patient @relation(fields: [patientId], references: [id])

  @@map("medicleReports")
}

model Prescription {
  id            String   @id @default(uuid())
  patientId     String
  appointmentId String   @unique
  doctorId      String
  Instruction   String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  patient     Patient     @relation(fields: [patientId], references: [id])
  appointment Appointment @relation(fields: [appointmentId], references: [id])
  doctor      Doctor      @relation(fields: [doctorId], references: [id])

  @@map("prescriptions")
}

model Specialites {
  id                String              @id @default(uuid())
  name              String              @unique
  icon              String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  doctorSpecielites DoctorSpecielites[]

  @@map("specialites")
}

model DoctorSpecielites {
  specialitesId String
  doctorId      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  doctor      Doctor      @relation(fields: [doctorId], references: [id])
  specialites Specialites @relation(fields: [specialitesId], references: [id])

  @@id([doctorId, specialitesId])
  @@map("doctor_specialites")
}

model Reviews {
  id            String   @id @default(uuid())
  doctorId      String
  patientId     String
  appointmentId String   @unique
  comment       String
  rating        Float    @default(0.0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  patient     Patient     @relation(fields: [patientId], references: [id])
  doctor      Doctor      @relation(fields: [doctorId], references: [id])
  appointment Appointment @relation(fields: [appointmentId], references: [id])

  @@map("reviews")
}

model Payments {
  id             String        @id @default(uuid())
  appointmentId  String        @unique
  amount         Int
  status         PaymentStatus
  transactionId  String
  paymentDetails Json
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  appointment    Appointment   @relation(fields: [appointmentId], references: [id])

  @@map("payments")
}
